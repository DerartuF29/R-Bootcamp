rmd2rscript2("module2_5.Rmd")
3+3
a <- 2
batmans_butler <- "alfred"
batmans
batmans_butler
3+3
# 2+2
3+3
3+3
3+3
######  This is my script!!
3+3
######  This is my script!!
3+3
trees
?trees
summary(trees)
str(trees)
layout(matrix(1:3,nrow=1,byrow = T))
hist(trees$Height)
hist(trees$Girth)
hist(trees$Volume)
# histograms:
layout(matrix(1:3,nrow=1,byrow = T))
hist(trees$Height)
hist(trees$Girth)
hist(trees$Volume)
pairs(trees)    # plots all scatterplots together as a scatterplot matrix!
pairs(trees)    # plots all scatterplots together as a scatterplot matrix!
layout(matrix(1:2,nrow=1,byrow = T))
plot(trees$Volume~trees$Girth)
plot(trees$Volume~trees$Height)
model1 <- lm(Volume~Girth,data=trees)
model1
model1
summary(model1)    # examine the results
xvals <- seq(5,30,0.5)
xvals
xvals
a <- 5
rm(a)
scalar1 <- 'this is a scalar'
scalar2 <- 104
scalar3 <- 5 + 6.5    # evaluates to the single value 11.5
scalar4 <- '4'
typeof(scalar4)    # returns: character
## what is this type?
scalar5 <- TRUE
typeof(scalar5)    # returns: logical
## what happens when we run this line of code? Think about the types.
scalar2 + scalar4
scalar2
scalar4
scalar2 + scalar3
vector1 <- c(1.1, 2.1, 3.1, 4)
vector2 <- c('a', 'b', 'c')
vector3 <- c(1, 'a', 2, 'b')
vector4 <- c(TRUE, 'a', 1)
vector5 <- c(TRUE, 1.2, FALSE)
typeof(vector3)
vector3
a <- 1
b <- 2
c <- 3
d.vec <- c(a, b, c)
d.vec
d.vec[1]
d.vec[2]
d.vec[6]
length(d.vec)    # the "length()" function returns the number of elements in a vector (or list, matrix etc.)
d1 <- d.vec           # copy the vector "d.vec"
d2 <- d.vec+3         # add 3 to all elements of the vector "d.vec"
d3 <- d1+d2           # elementwise addition
d4 <- d1+c(1,2)       # what does this do?
d4
d.mat <- cbind(d1,d2)        # create a matrix by binding vectors, with vector d1 as column 1 and d2 as column 2
d.mat
class(d.mat)   # confirm that the new object "d.mat" is a matrix!
d.mat <- matrix(c(1,2,3,4,5,6),nrow=3,ncol=2)        # create matrix another way
d.mat
d.mat <- matrix(c(1,2,3,4,5,6),nrow=3,ncol=2,byrow=T)        # create matrix another way
d.mat
d.mat <- matrix(c(1,2,3,4,5,6),nrow=3,ncol=2,byrow=T)        # create matrix another way
d.mat
?matrix
help("matrix")
d.mat[1,2]
d.mat
d.array=array(0,dim=c(3,2,4))       # create 3 by 2 by 4 array full of zeros
d.array
d.array[1,2,3]
d.list <- list()        # create empty list
d.list[[1]] <- c(1,2,3)     # note the double brackets- this is one way to reference a specified list element.
d.list[[2]] <- c(4,5)
d.list[[3]] <- "Alfred Pennyworth"
d.list
d.list[[1]]
d.list[[1]][2]
typeof(d.list[[1]])
typeof(d.list[[3]])
#############
### DATA FRAMES
#############
d.df <- data.frame(d1=c(1,2,3),d2=c(4,5,6))        # create a ‘data frame’ with two columns. Each column is a vector of length 3
d.df
d.mat
d.df[1,1]
d.mat[1,1]
d.df[["newcol"]] <- c("a","b","c")
d.df
d.mat[["newcol"]] <- c("a","b","c")
sum(d.vec)
?sum
?plot
plot <- rep("A","B","C",each=4)
plot <- rep("A","B","C",each=4)
plot <- rep(c("A","B","C"),each=4)
plot
plotvar <- rep(c("A","B","C"),each=4)
rpois(10,lambda = 0.9)
rpois(10,lambda = 1.5)
my.data <- data.frame(
Obs.Id = 1:100,
Treatment = rep(c("A","B","C","D","E"),each=20),
Block = rep(1:20,times=5),
Germination = rpois(100,lambda=rep(c(1,5,4,7,1),each=20)),
AvgHeight = rnorm(100,mean=rep(c(10,30,31,25,35),each=20))
)
head(my.data)
summary(my.data)    # Use the "summary()" function to summarize each column in the data frame.
summary(my.data)    # Use the "summary()" function to summarize each column in the data frame.
summary(my.data)    # Use the "summary()" function to summarize each column in the data frame.
d.vec <- 2:10
d.vec
d.vec[3]
d.vec[c(1,5)]
d.vec[-3]
d.vec[3] <- NA
d.vec
my.data
names(my.data)
my.data[,"Block"]
my.data[3,"Block"]
my.data[["Block"]]
my.data$Block
d.list
names(d.list) <- c("a","b","c")
d.list
d.list$a
d.list[["a"]]
str(my.data)
# Find the directory you're working in
getwd()          # note: the results from running this command on my machine will probably differ from yours!
ToothGrowth$supp
typeof(ToothGrowth$supp)
class(ToothGrowth$supp)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
names(plot.colors) <- levels(ToothGrowth$supp)
plot.colors <- c("red", "blue")
names(plot.colors) <- levels(ToothGrowth$supp)
plot.colors
color.vector <-match(as.character(
ToothGrowth$supp),plot.colors)
color.vector
as.character(
ToothGrowth$supp)
plot.colors
color.vector <-match(as.character(
ToothGrowth$supp),names(plot.colors))
color.vector
ToothGrowth$supp
typeof(ToothGrowth$supp)
class(ToothGrowth$supp)
as.character(ToothGrowth$supp)
plot.colors <- c("red", "blue")
plot.colors
names(plot.colors) <- levels(ToothGrowth$supp)
plot.colors
plot(x=ToothGrowth$dose, y=ToothGrowth$len, pch=19, col=color.vector,
main="Tooth Growth vs. Vitamin C Dose", xlab="Viatmin C Dose (mg)",
ylab="Tooth Growth (mm)", las=1)
plot.colors <- c("red", "blue")
names(plot.colors) <- levels(ToothGrowth$supp)
color.vector <-match(as.character(
ToothGrowth$supp),names(plot.colors))
plot(x=ToothGrowth$dose, y=ToothGrowth$len, pch=19, col=color.vector,
main="Tooth Growth vs. Vitamin C Dose", xlab="Viatmin C Dose (mg)",
ylab="Tooth Growth (mm)", las=1)
# First legend
legend("topleft", pch=19, col=plot.colors, legend=unique(ToothGrowth$supp))
color.vector <-match(as.character(
ToothGrowth$supp),names(plot.colors))
plot(x=ToothGrowth$dose, y=ToothGrowth$len, pch=19, col=color.vector,
main="Tooth Growth vs. Vitamin C Dose", xlab="Viatmin C Dose (mg)",
ylab="Tooth Growth (mm)", las=1)
color.vector
color.vector
color.vector <-plot.colors[match(as.character(
ToothGrowth$supp),names(plot.colors))]
color.vector
plot(x=ToothGrowth$dose, y=ToothGrowth$len, pch=19, col=color.vector,
main="Tooth Growth vs. Vitamin C Dose", xlab="Viatmin C Dose (mg)",
ylab="Tooth Growth (mm)", las=1)
# First legend
legend("topleft", pch=19, col=plot.colors, legend=unique(ToothGrowth$supp))
plot(x=ToothGrowth$dose, y=ToothGrowth$len, pch=19, col=color.vector,
main="Tooth Growth vs. Vitamin C Dose", xlab="Viatmin C Dose (mg)",
ylab="Tooth Growth (mm)", las=1)
# First legend
legend("topleft", pch=19, col=plot.colors, legend=unique(ToothGrowth$supp))
?predict.lm
unlink('module1_3_cache', recursive = TRUE)
unlink('module2_4_cache', recursive = TRUE)
unlink('module2_5_cache', recursive = TRUE)
unlink('index_cache', recursive = TRUE)
unlink('module1_1_cache', recursive = TRUE)
unlink('module1_2_cache', recursive = TRUE)
unlink('module1_3_cache', recursive = TRUE)
unlink('module1_4_cache', recursive = TRUE)
unlink('module2_1_cache', recursive = TRUE)
unlink('module2_2_cache', recursive = TRUE)
unlink('module2_2_cache', recursive = TRUE)
unlink('module2_3_cache', recursive = TRUE)
unlink('module2_4_cache', recursive = TRUE)
unlink('module2_5_cache', recursive = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biobase")
knitr::opts_chunk$set(echo = TRUE)
rmd2rscript <- function(infile="module1_1.Rmd"){    # function for converting markdown to scripts
outfile1 <- gsub(".Rmd",".R",infile)
outfile2 <- gsub(".Rmd",".txt",infile)
close( file( outfile1, open="w" ) )   # clear output file
close( file( outfile2, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile1,"w")
con3 <- file(outfile2,"w")
stringToFind <- "```{r*"
isrblock <- FALSE
count=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
if(isrblock){
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if(count>1){
write(newline,file=con2,append=TRUE)
write(newline,file=con3,append=TRUE)
}
count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2 <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2("module1_1.Rmd")
rmd2rscript2("module1_1.Rmd")
rmd2rscript2("module1_2.Rmd")
rmd2rscript2("module1_1.Rmd")
rmd2rscript2("module1_2.Rmd")
rmd2rscript2("module1_3.Rmd")
rmd2rscript2("module1_2.Rmd")
rmd2rscript2("module1_3.Rmd")
rmd2rscript2("module1_4.Rmd")
rmd2rscript2("module1_4.Rmd")
rmd2rscript2("module2_1.Rmd")
rmd2rscript2("module1_4.Rmd")
rmd2rscript2("module2_1.Rmd")
rmd2rscript2("module2_2.Rmd")
rmd2rscript2("module2_2.Rmd")
rmd2rscript2("module2_3.Rmd")
rmd2rscript2("module2_1.Rmd")
rmd2rscript2("module2_2.Rmd")
rmd2rscript2("module2_3.Rmd")
rmd2rscript2("module2_4.Rmd")
rmd2rscript2("module2_2.Rmd")
rmd2rscript2("module2_3.Rmd")
rmd2rscript2("module2_4.Rmd")
rmd2rscript2("module2_5.Rmd")
rmarkdown::render("index.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_1.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_1.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_2.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_3.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_4.Rmd",rmarkdown::pdf_document())  # latex_engine="xelatex"
citation("climwin")
10*30*4
10*40*4
12*40*4
14*40*4
11*40*4
18*30*4
14*30*4
1800/30
1800/20
90/6
1800*4
1800*4
7200*2
63/12
1/12
63.5/12
202.88*12
202.88*6
202.88*8
data("Titanic")
summary(TiTitanic)
summary(Titanic)
Titanic
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
# read built-in data on fuel efficiency of cars
data(cars)
str(cars)    # examine the structure of this data object
?cars        # learn more about this built-in data object
?mtcars        # learn more about this built-in data object
knitr::opts_chunk$set(echo = TRUE)
rmd2rscript <- function(infile="module1_1.Rmd"){    # function for converting markdown to scripts
outfile1 <- gsub(".Rmd",".R",infile)
outfile2 <- gsub(".Rmd",".txt",infile)
close( file( outfile1, open="w" ) )   # clear output file
close( file( outfile2, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile1,"w")
con3 <- file(outfile2,"w")
stringToFind <- "```{r*"
isrblock <- FALSE
count=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
if(isrblock){
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if(count>1){
write(newline,file=con2,append=TRUE)
write(newline,file=con3,append=TRUE)
}
count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2 <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2("module1_1.Rmd")
rmd2rscript2("module1_2.Rmd")
rmd2rscript2("module1_3.Rmd")
install.packages("rmarkdown")
library(knitr)
detach("package:knitr", unload = TRUE)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
sculpin.df <- read.csv("sculpineggs.csv")
head(sculpin.df)
plot(NUMEGGS ~ FEMWT,data=sculpin.df)                      # plot data
abline(m1,col="black")                                     # plot line of best fit
##################################
####  Model selection example ####
##################################
## Try to work through these examples and make sure you understand them before moving on to the challenge exercises.
m1 <- lm(NUMEGGS ~ FEMWT, data=sculpin.df)                  # fit linear regression model
summary(m1)
m2 <- lm(NUMEGGS ~ 1, data=sculpin.df)                      # fit linear regression with intercept only (mean model)
summary(m2)
m3 <- lm(NUMEGGS ~ I(FEMWT^0.5), data=sculpin.df)           # fit linear regression with intercept and sqrt of FEMWT term
summary(m3)
plot(NUMEGGS ~ FEMWT,data=sculpin.df)                      # plot data
abline(m1,col="black")                                     # plot line of best fit
abline(m2,col="red")                                       # plot intercept only model
#########
#  Here's a flexible method for drawing any arbitrary non-linear relationship!
FEMWT.pred <- data.frame(FEMWT = seq(10,45,by=0.1))        # create new data frame to predict number of eggs from FEMWT of 10 to 45 by increments of 0.1
NUMEGGS.pred <- predict(m3,newdata=FEMWT.pred)             # make prediction using "predict()" function
lines(FEMWT.pred$FEMWT,NUMEGGS.pred,col="green")  # plot sqrt model (note the use of the "points()" function to draw a line!)
########
# Perform model selection!
#Compare models using AIC
AIC(m1)
AIC(m2)
AIC(m3)
#Compare models using R-squared
summary(m1)$r.squared
summary(m2)$r.squared
summary(m3)$r.squared
#########
#  And finally, here's how you can draw a confidence interval or prediction interval around a regression relationship!
plot(NUMEGGS ~ FEMWT,data=sculpin.df)                      # plot data
NUMEGGS.confint <- predict(m3,newdata=FEMWT.pred,interval="prediction")             # use "predict()" function to compute the prediction interval!
points(FEMWT.pred$FEMWT,NUMEGGS.confint[,"fit"],col="green",typ="l",lwd=2)  # plot fitted sqrt model
points(FEMWT.pred$FEMWT,NUMEGGS.confint[,"lwr"],col="green",typ="l",lty=2)  # plot fitted sqrt model
points(FEMWT.pred$FEMWT,NUMEGGS.confint[,"upr"],col="green",typ="l",lty=2)  # plot fitted sqrt model
knitr::opts_chunk$set(echo = TRUE)
rmd2rscript <- function(infile="module1_1.Rmd"){    # function for converting markdown to scripts
outfile1 <- gsub(".Rmd",".R",infile)
outfile2 <- gsub(".Rmd",".txt",infile)
close( file( outfile1, open="w" ) )   # clear output file
close( file( outfile2, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile1,"w")
con3 <- file(outfile2,"w")
stringToFind <- "```{r*"
isrblock <- FALSE
count=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
if(isrblock){
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if(count>1){
write(newline,file=con2,append=TRUE)
write(newline,file=con3,append=TRUE)
}
count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2 <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2("module1_4.Rmd")
rmd2rscript2("module2_1.Rmd")
rmd2rscript2("module2_2.Rmd")
rmd2rscript2("module2_3.Rmd")
rmd2rscript2("module2_4.Rmd")
rmd2rscript2("module2_5.Rmd")
rmd2rscript2("module1_1.Rmd")
prob=0.75
prob/(1-prob)
log(prob/(1-prob))
qlogis(0.75)
plogis(1.0986)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
sample(0:50, 10, replace = TRUE)
logit(x)
logit.safe(x)
rmd2rscript2("module1_4.Rmd")
cbind(rbinom(10, 1, .5), rbinom(10, 1, .6))
knitr::opts_chunk$set(echo = TRUE)
rmd2rscript2("module2_2.Rmd")
rmarkdown::render("module2_2.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module2_3.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module2_3.Rmd",rmarkdown::pdf_document())
tinytex::reinstall_tinytex()
