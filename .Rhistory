match(iris$Species,names(plot.colors))
color.vector <- plot.colors[indices]
indices <- match(iris$Species,names(plot.colors))   # the "match()" function returns the indices of the first vector that match the second vector
color.vector <- plot.colors[indices]
color.vector
plot(x=iris$Petal.Length, y=iris$Sepal.Length, pch=19, col=color.vector,
main="Iris sepal length vs. petal length", xlab="Petal length",
ylab="Sepal length", las=1)
iris2 <- iris[sample(1:nrow(iris),replace = T),]
indices <- match(iris2$Species,names(plot.colors))   # the "match()" function returns the indices of the first vector that match the second vector
color.vector <- plot.colors[indices]
plot(x=iris2$Petal.Length, y=iris2$Sepal.Length, pch=19, col=color.vector,
main="Iris sepal length vs. petal length", xlab="Petal length",
ylab="Sepal length", las=1)
nrow(iris2)
color.vector <- rep(x=plot.colors, each=50)
color.vector
color.vector <- rep(x=plot.colors, each=50)
plot(x=iris2$Petal.Length, y=iris2$Sepal.Length, pch=19, col=color.vector,
main="Plot of Iris colored by species")
## The old method is NOT general:
color.vector <- rep(x=plot.colors, each=50)
plot(x=iris2$Petal.Length, y=iris2$Sepal.Length, pch=19, col=color.vector,
main="Plot of Iris colored by species (not!")
# generate a vector of colors for our plot (one color for each observation)
indices <- match(iris$Species,names(plot.colors))   # the "match()" function returns the indices of the first vector that match the second vector
color.vector2 <- plot.colors[indices]
plot(x=iris$Petal.Length, y=iris$Sepal.Length, pch=19, col=color.vector2,
main="Iris sepal length vs. petal length", xlab="Petal length",
ylab="Sepal length", las=1)
# make a new version of the iris data frame that is neither in order nor has the same number of observations for each species (to illustrate generality of the new method)
iris2 <- iris[sample(1:nrow(iris),replace = T),]   # use the "sample()" function to create a randomized ("bootstrapped") version of the iris data frame
# now repeat the above steps:
indices <- match(iris2$Species,names(plot.colors))   # the "match()" function returns the indices of the first vector that match the second vector
color.vector2 <- plot.colors[indices]
plot(x=iris2$Petal.Length, y=iris2$Sepal.Length, pch=19, col=color.vector2,
main="Iris sepal length vs. petal length", xlab="Petal length",
ylab="Sepal length", las=1)
## The old method is NOT general:
color.vector <- rep(x=plot.colors, each=50)
plot(x=iris2$Petal.Length, y=iris2$Sepal.Length, pch=19, col=color.vector,
main="Plot of Iris colored by species (not!")
match(c(1,2,3),c(2,3,1))
colnames(trees)
names(trees)
a <- c(1:3)
a[[1]]
a[[3]]
a[3]
a[[[3]]]
a[[3]]
# ?legend
layout(matrix(1:3, nrow=1, ncol=3))
# Plot
plot(x=iris$Petal.Length, y=iris$Sepal.Length, pch=19, col=color.vector,
main="Iris sepal length vs. petal length", xlab="Petal length",
ylab="Sepal length", las=1)
# First legend
legend("topleft", pch=19, col=plot.colors, legend=unique(iris$Species))
# Second plot
plot(x=iris$Petal.Length, y=iris$Sepal.Length, pch=19, col=color.vector,
main="Iris sepal length vs. petal length",
xlab="Petal length", ylab="Sepal length", las=1)
# Second legend
# The bty="n" argument suppresses the border around the legend. (A personal preference)
legend("topleft", pch=19, col=plot.colors,
legend=c("I. setosa", "I. versicolor", "I. virginica"), bty="n")
# Plot Three
plot(x=iris$Petal.Length, y=iris$Sepal.Length, pch=19, col=color.vector,
main="Iris sepal length vs. petal length",
xlab="Petal length", ylab="Sepal length", las=1)
#Legend tree with Italics
legend("topleft", pch=19, col=plot.colors,
legend=c("I. setosa", "I. versicolor", "I. virginica"),
bty="n", text.font=3)
head(cars)
cars
mtcars
?mtcars
plot(mpg~wt  data=mtcars,pch=20,xlab="Vehicle weight",ylab="Fuel economy (mpg)")      # note the tilde, which can be read "as a function of" -- i.e., "mpg as a function of wt"
plot(mpg~wt,  data=mtcars,pch=20,xlab="Vehicle weight",ylab="Fuel economy (mpg)")      # note the tilde, which can be read "as a function of" -- i.e., "mpg as a function of wt"
plot(mpg~wt,  data=mtcars,pch=20,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)")      # note the tilde, which can be read "as a function of" -- i.e., "mpg as a function of wt"
hp_rescale <- with(mtcars,(hp-min(hp))/max(hp))
hp_rescale
range(hp)
range(mtcars$hp)
diff(range(mtcars$hp))
hp_rescale <- with(mtcars,(hp-min(hp))/diff(range(hp)))    # scale from 0 to 1
hp_rescale
plot(mpg~wt,  data=mtcars,pch=20,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cex=(hp_rescale+1)*1.2)      # note the tilde, which can be read "as a function of" -- i.e., "mpg as a function of wt"
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cex=(hp_rescale+1)*1.2)      # note the tilde, which can be read "as a function of" -- i.e., "mpg as a function of wt"
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cex=(hp_rescale+0.6)*1.2)      # note the tilde, which can be read "as a function of" -- i.e., "mpg as a function of wt"
legend("topright",pch=c(1,1),cex=c(0.6,0.6*1.2),legend=range(mtcars$hp),bty="n")
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cex=(hp_rescale+0.6)*1.2)   # plot with different sized points
legend("topright",pch=c(1,1),cex=c(0.6,0.6*1.2),legend=range(mtcars$hp),bty="n")
c(0.6,0.6*1.2)
## Plot fuel economy by weight and horsepower
hp_rescale <- with(mtcars,(hp-min(hp))/diff(range(hp)))    # scale from 0 to 1
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cex=(hp_rescale+0.6)*1.2)   # plot with different sized points
legend("topright",pch=c(1,1),cex=c(0.6,1.6*1.2),legend=c(min(mtcars$hp),max(mtcars$hp)),bty="n")
c(0.6,1.6*1.2)
c(min(mtcars$hp),max(mtcars$hp))
## Plot fuel economy by weight and horsepower
hp_rescale <- with(mtcars,(hp-min(hp))/diff(range(hp)))    # scale from 0 to 1
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cex=(hp_rescale+0.6)*1.2)   # plot with different sized points
legend("topright",pch=c(1,1),cex=c(0.6,1.6*1.2),legend=range(mtcars$hp),bty="n")
## Plot fuel economy by weight and horsepower
hp_rescale <- with(mtcars,(hp-min(hp))/diff(range(hp)))    # scale from 0 to 1
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cex=(hp_rescale+0.6)*1.2)   # plot with different sized points
legend("topright",pch=c(1,1),cex=c(0.6,1.6*1.2),legend=as.character(range(mtcars$hp)),bty="n")
hp_rescale
## Plot fuel economy by weight and horsepower
hp_rescale <- with(mtcars,(hp-min(hp))/diff(range(hp)))    # scale from 0 to 1
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cex=(hp_rescale+0.6)*1.2)   # plot with different sized points
legend("topright",pch=c(1,1),legend=as.character(range(mtcars$hp)),bty="n")
c(0.6,1.6*1.2)
## Plot fuel economy by weight and horsepower
hp_rescale <- with(mtcars,(hp-min(hp))/diff(range(hp)))    # scale from 0 to 1
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cex=(hp_rescale+0.6)*1.2)   # plot with different sized points
legend("topright",pch=c(1,1),cex=c(0.6,2),legend=range(mtcars$hp),bty="n")
?legend
## Plot fuel economy by weight and horsepower
hp_rescale <- with(mtcars,(hp-min(hp))/diff(range(hp)))    # scale from 0 to 1
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cex=(hp_rescale+0.6)*1.2)   # plot with different sized points
legend("topright",pch=c(1,1),pt.cex=c(0.6,2),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower
hp_rescale <- with(mtcars,(hp-min(hp))/diff(range(hp)))    # scale from 0 to 1
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cex=(hp_rescale+0.6)*1.2)   # plot with different sized points
legend("topright",pch=c(1,1),pt.cex=c(0.6,0.6*1.2),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
?topo.colors
cols <- topo.colors(length(mtcars$hp))
cols
cols <- cols[order(mtcars$hp)]
## Plot fuel economy by weight and horsepower again- this time by color
cols <- topo.colors(length(mtcars$hp))
cols <- cols[order(mtcars$hp)]
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cols=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
c(cols[1],cols[length(cols)])
cols[length(cols)]
## Plot fuel economy by weight and horsepower again- this time by color
cols <- topo.colors(length(mtcars$hp))
cols <- cols[order(mtcars$hp)]
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cols=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- topo.colors(length(mtcars$hp))
cols <- cols[order(mtcars$hp)]
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols1 <- topo.colors(length(mtcars$hp))
cols2 <- cols1[order(mtcars$hp)]
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols2)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols1[1],cols1[length(cols1)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols1 <- heat.colors(length(mtcars$hp))
cols2 <- cols1[order(mtcars$hp)]
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols2)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols1[1],cols1[length(cols1)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(0.5,0.5,hp_rescale)
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(hp_rescale,hp_rescale,hp_rescale)
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(0.5,hp_rescale,hp_rescale)
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(0.5,1-hp_rescale,hp_rescale)
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(1-hp_rescale,1-hp_rescale,hp_rescale)
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(1-hp_rescale,1-hp_rescale,1-hp_rescale)
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(1-hp_rescale,1-hp_rescale,0.5)
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(1-hp_rescale,1-hp_rescale,0.5)
plot(mpg~wt,  data=mtcars,pch=20,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(1-hp_rescale,1-hp_rescale,0.5)
plot(mpg~wt,  data=mtcars,pch=20,pch=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(1-hp_rescale,1-hp_rescale,0.5)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(1-hp_rescale,1-hp_rescale,0.2)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(1-hp_rescale,1-hp_rescale,0.8)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(1,1),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(1-hp_rescale,1-hp_rescale,0.8)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(20,20),cex=c(2,2),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(1-hp_rescale,1-hp_rescale,0.8)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(20,20),pt.cex=c(2,2),col=c(cols[1],cols[length(cols)]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(1-hp_rescale,0.2,0.8)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(20,20),pt.cex=c(2,2),col=c(),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(1-hp_rescale,0.2,0.8)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(20,20),pt.cex=c(2,2),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
cols <- hsv(1-hp_rescale,0.7,0.8)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=cols)   # plot with different sized points
legend("topright",pch=c(20,20),pt.cex=c(2,2),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
cols <- heat.colors(100)
hp_rescale
hp_rescale*100
hp_rescale*99+1
cols <- round(hp_rescale*99+1)
round(hp_rescale*99+1)
colramp <- heat.colors(100)
colindex <- round(hp_rescale*99+1)
## Plot fuel economy by weight and horsepower again- this time by color
colramp <- heat.colors(100)
colindex <- round(hp_rescale*99+1)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=colramp[colindex])   # plot with different sized points
legend("topright",pch=c(20,20),pt.cex=c(2,2),col=c(colramp[1],colramp[100]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
colramp <- terrain.colors(100)
colindex <- round(hp_rescale*99+1)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=colramp[colindex])   # plot with different sized points
legend("topright",pch=c(20,20),pt.cex=c(2,2),col=c(colramp[1],colramp[100]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
colramp <- terrain.colors(125)
colindex <- round(hp_rescale*99+25)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=colramp[colindex])   # plot with different sized points
legend("topright",pch=c(20,20),pt.cex=c(2,2),col=c(colramp[1],colramp[100]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
colramp <- terrain.colors(125)
colindex <- round(hp_rescale*99+25)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=colramp[colindex])   # plot with different sized points
legend("topright",pch=c(20,20),pt.cex=c(2,2),col=c(colramp[25],colramp[125]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
colramp <- terrain.colors(125)
colindex <- round(hp_rescale*99+1)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=colramp[colindex])   # plot with different sized points
legend("topright",pch=c(20,20),pt.cex=c(2,2),col=c(colramp[1],colramp[100]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Plot fuel economy by weight and horsepower again- this time by color
colramp <- terrain.colors(125)
colindex <- round(hp_rescale*99+1)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=colramp[colindex])   # plot with different sized points
legend("topright",pch=c(20,20),pt.cex=c(2,2),col=c(colramp[1],colramp[100]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## Often, we need to write functions that are not included in the base R package e.g., the logit function.
## Calculate the log-odds (logit).
logit <- function(x){
log(x/(1-x))
}
## Calculate logit of 0.9.
logit(.9)
## Sequence between 0 and 1.
x <- seq(from = 0, to = 1, by = 0.01)
## Caclulate the logit of a vector.
logit.x <- logit(x)
logit.x
## Plot x on x-axis, and logit(x) on y axis.
plot(x, logit.x, type = 'l')    # View the output graphically.
## The expit (or inverse logit) funtion.
expit <- function(x){
exp(x)/(1+exp(x))
}
## Calculate the inverse-logit of logit(0.9) = 2.197225.
expit(2.197225)
expit.logit.x <- expit(logit.x)    # Return to original x values.
## Plot x on x-axis, and expit(logit(x)) = x on y axis.
plot(x, expit.logit.x, type = 'l')
## Plot "logistic" curve
plot(x=seq(-3,3,0.1),y=expit(seq(-3,3,0.1)),type="l")
###
### FOR loop examples
###
#############
## EXAMPLE 1: Plot a 3D surface using data already stored in R.
Z <- 2 * volcano        # Exaggerate the relief (multiply the elevation by 2)
X <- 10 * (1:nrow(Z))   # set horizontal coordinates -- 10 meter spacing (S to N)
Y <- 10 * (1:ncol(Z))   # set vertical coordinates -- 10 meter spacing (E to W)
# Z   # make sure the elevation matrix looks right
par(bg = "white")
layout(matrix(c(1,2),nrow=2))
persp(X,  Y, Z, theta = 135, phi = 30, col = "green3",    # "persp()" produces a 3D "perspective plot"
scale = FALSE, ltheta = -120, shade = 0.75,
border = NA, box = FALSE)
## change the value of theta from 135 to 90 to change the viewing angle
persp(X, Y, Z, theta = 90, phi = 30, col = "green3",
scale = FALSE,  ltheta = -120, shade = 0.75,
border = NA, box = FALSE)
###
### FOR loop examples
###
#############
## EXAMPLE 1: Plot a 3D surface using data already stored in R.
Z <- 2 * volcano        # Exaggerate the relief (multiply the elevation by 2)
X <- 10 * (1:nrow(Z))   # set horizontal coordinates -- 10 meter spacing (S to N)
Y <- 10 * (1:ncol(Z))   # set vertical coordinates -- 10 meter spacing (E to W)
# Z   # make sure the elevation matrix looks right
par(bg = "white")
layout(matrix(c(1,1),nrow=1))
persp(X,  Y, Z, theta = 135, phi = 30, col = "green3",    # "persp()" produces a 3D "perspective plot"
scale = FALSE, ltheta = -120, shade = 0.75,
border = NA, box = FALSE)
## Use a for-loop to help view many angles.
for(i in 1:18){
persp(X, Y, Z, theta = i*20, phi = 30, col = "green3",
scale = FALSE,  ltheta = -120, shade = 0.75,
border = NA, box = FALSE)
print(i*20)
readline()                               # Pauses the for-loop until [enter] is pushed
}
knitr::opts_chunk$set(echo = TRUE)
rmd2rscript <- function(infile="module1_1.Rmd"){    # function for converting markdown to scripts
outfile1 <- gsub(".Rmd",".R",infile)
outfile2 <- gsub(".Rmd",".txt",infile)
close( file( outfile1, open="w" ) )   # clear output file
close( file( outfile2, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile1,"w")
con3 <- file(outfile2,"w")
stringToFind <- "```{r*"
isrblock <- FALSE
count=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
if(isrblock){
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if(count>1){
write(newline,file=con2,append=TRUE)
write(newline,file=con3,append=TRUE)
}
count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2 <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2("module1_1.Rmd")
rmd2rscript2("module1_2.Rmd")
rmd2rscript2("module1_3.Rmd")
rmd2rscript2("module1_4.Rmd")
rmd2rscript2("module2_1.Rmd")
rmd2rscript2("module2_2.Rmd")
rmd2rscript2("module2_3.Rmd")
rmd2rscript2("module2_4.Rmd")
rmarkdown::render('index.Rmd', 'word_document')
rmarkdown::render("index.Rmd",rmarkdown::pdf_document())
rmarkdown::render("index.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_1.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_1.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_2.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_3.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_4.Rmd",rmarkdown::pdf_document())  # latex_engine="xelatex"
rmd2rscript2("module2_1.Rmd")
rmd2rscript2
rmd2rscript <- function(infile="module1_1.Rmd"){    # function for converting markdown to scripts
outfile1 <- gsub(".Rmd",".R",infile)
outfile2 <- gsub(".Rmd",".txt",infile)
close( file( outfile1, open="w" ) )   # clear output file
close( file( outfile2, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile1,"w")
con3 <- file(outfile2,"w")
stringToFind <- "```{r*"
isrblock <- FALSE
count=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
if(isrblock){
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if(count>1){
write(newline,file=con2,append=TRUE)
write(newline,file=con3,append=TRUE)
}
count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2 <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2("module2_1.Rmd")
rmarkdown::render("module2_1.Rmd",rmarkdown::pdf_document())
rmd2rscript <- function(infile="module1_1.Rmd"){    # function for converting markdown to scripts
outfile1 <- gsub(".Rmd",".R",infile)
outfile2 <- gsub(".Rmd",".txt",infile)
close( file( outfile1, open="w" ) )   # clear output file
close( file( outfile2, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile1,"w")
con3 <- file(outfile2,"w")
stringToFind <- "```{r*"
isrblock <- FALSE
count=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
if(isrblock){
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if(count>1){
write(newline,file=con2,append=TRUE)
write(newline,file=con3,append=TRUE)
}
count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2 <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2("module1_1.Rmd")
rmd2rscript2("module1_2.Rmd")
rmd2rscript2("module1_3.Rmd")
rmd2rscript2("module1_4.Rmd")
rmd2rscript2("module2_1.Rmd")
rmd2rscript2("module2_2.Rmd")
rmd2rscript2("module2_3.Rmd")
rmd2rscript2("module2_4.Rmd")
rmd2rscript2("module2_5.Rmd")
plot(trees$Volume~trees$Height)
new_obj <- 5
