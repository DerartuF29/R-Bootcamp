# X[,b]        access column b of matrix/data frame X
# X[a,]        access row a of matrix/data frame X
d <- matrix(1:6,3,2)
d
d[,2]                # 2nd column of d
d[2,]                # 2nd row of d
d[2:3,]        # 2nd and 3rd rows of d in a matrix
d.df=my.data[21:30,]  # only take 10 observations
d.df
d.df$Germination      # Subsetting a data frame
d.df["Germination"]
d.df[["Germination"]]
d.df[[Germination]]      # same thing!
d.df$Germination      # Subsetting a data frame
d.df[["Germination"]]      # same thing!
d.df[,4]              # same thing!
d.df[[4]]             # same thing!
d.df[,"Germination"]           # same thing!
d.df["Germination"]           # same thing!
d.df["Germination"]           # same thing!
d.df["Germination"]
knitr::opts_chunk$set(echo = TRUE)
rmd2rscript <- function(infile="module1_1.Rmd"){    # function for converting markdown to scripts
outfile1 <- gsub(".Rmd",".R",infile)
outfile2 <- gsub(".Rmd",".txt",infile)
close( file( outfile1, open="w" ) )   # clear output file
close( file( outfile2, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile1,"w")
con3 <- file(outfile2,"w")
stringToFind <- "```{r*"
isrblock <- FALSE
count=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
if(isrblock){
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if(count>1){
write(newline,file=con2,append=TRUE)
write(newline,file=con3,append=TRUE)
}
count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2 <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2("module1_1.Rmd")
rmd2rscript2("module1_2.Rmd")
rmd2rscript2("module1_3.Rmd")
rmd2rscript2("module1_4.Rmd")
rmarkdown::render("index.Rmd",rmarkdown::pdf_document())
rmarkdown::render("index.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_1.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_2.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_2.Rmd",rmarkdown::pdf_document())
rmarkdown::render("module1_3.Rmd",rmarkdown::pdf_document())
tapply(X=iris$Sepal.Length, INDEX=iris$Species, FUN=mean)
## calculate the mean Sepal Length of for each species
bar.heights <- tapply(iris$Sepal.Length, iris$Species, mean)   #use "tapply()" function, which summarizes a numeric variable by levels of a categorical variable)
rmarkdown::render("module1_3.Rmd",rmarkdown::pdf_document())
layout(matrix(1:2, 1, 2))
## y-axis is in counts by default (total observations in each "bin")
hist(iris$Sepal.Length, main="Histogram of Sepal Length",
xlab = "Sepal Length")
## change y-axis to proportions of the entire dataset using freq=FALSE
hist(iris$Sepal.Length, freq=FALSE, main="Histogram of Sepal Length",
xlab = "Sepal Length")
## Add a density estimator
lines(density(iris$Sepal.Length))   # add a line to the histogram to approximate the probability density of the data distribution
rmarkdown::render("module1_3.Rmd",rmarkdown::pdf_document())
unlink('module1_3_cache', recursive = TRUE)
rmarkdown::render("module1_3.Rmd",rmarkdown::pdf_document())
## calculate the mean Sepal Length of for each species
bar.heights <- tapply(iris$Sepal.Length, iris$Species, mean)   #use "tapply()" function, which summarizes a numeric variable by levels of a categorical variable)
# The basic 'barplot()' function
barplot(bar.heights)
unlink('module1_3_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
####
####  Functions
####
my.function = function(){       # this function has no arguments
message <- "Hello, world!"
return(message)
}
my.function()
## A function to square the arguments.
square <- function(x){
x^2
}
## Square a single value (scalar).
square(2)
## Square all elements of a vector.
square(1:10)
## Often, we need to write functions that are not included in the base R package e.g., the logit function.
## Calculate the log-odds (logit).
logit <- function(x){
log(x/(1-x))
}
## Calculate logit of 0.9.
logit(.9)
## Sequence between 0 and 1.
x <- seq(from = 0, to = 1, by = 0.01)
## Caclulate the logit of a vector.
logit.x <- logit(x)
logit.x
## Plot x on x-axis, and logit(x) on y axis.
plot(x, logit.x, type = 'l',xlab="x",ylab="logit(x)")    # View the output graphically.
## n is the number of animals being monitored.
## d is the number of animals that died.
survival <- function(n, d){
(n-d)/n
}
## One year of data.
survival(n = 10, d = 5)
## Simulate many years of data.
d <- sample(0:50, 10, replace = TRUE)   # note use of "sample()" function   [random number of dead individuals]
n <- rep(100, times=10)                 # total number of individuals
surv <- survival(n = n, d = d)
surv
## Plot year-specific survival rate (random- will look different every time!)
plot(1:10, surv, type = 'l',xlab="Year",ylab="Survival")
d
n
####
####  if...else statements
####
########
# Draw a sample from a Binomial distribution with p = 0.7 (here, p is detection probability).
n.samples <- 1
p <- 0.7            # probability of detection
x <- rbinom(n = n.samples, size = 1, prob = p)
if (x > 0) {
print("Detected")
} else {
print("Not detected")
}
######
# Make a "safe" version of the "logit" function
logit.safe <- function(x){
bad <- ((x<0)|(x>1))
if(any(bad)){
stop("logit is only defined for x between 0 and 1!")
}else{
log(x/(1-x))
}
}
x <- seq(from = -1, to = 2, by = 0.1)
# logit(x)      # this returns impossible numbers (NaNs)
# logit.safe(x)   # this will now throw an error!
logit.safe(c(0.15,0.99))
n.samples
p
x
########
# Draw a sample from a Binomial distribution with p = 0.7 (here, p is detection probability).
n.samples <- 1
p <- 0.7            # probability of detection
x <- rbinom(n = n.samples, size = 1, prob = p)
x
unlink('module1_4_cache', recursive = TRUE)
####
####  if...else statements
####
########
# Draw a sample from a Binomial distribution with p = 0.7 (here, p is detection probability).
n.samples <- 1
p <- 0.7            # probability of detection
x <- rbinom(n = n.samples, size = 1, prob = p)
if (x > 0) {
print("Detected")
} else {
print("Not detected")
}
######
# Make a "safe" version of the "logit" function
logit.safe <- function(x){
bad <- ((x<0)|(x>1))
if(any(bad)){
stop("logit is only defined for x between 0 and 1!")
}else{
log(x/(1-x))
}
}
x <- seq(from = -1, to = 2, by = 0.1)
# logit(x)      # this returns impossible numbers (NaNs)
# logit.safe(x)   # this will now throw an error!
logit.safe(c(0.15,0.99))
x
########
# Draw a sample from a Binomial distribution with p = 0.7 (here, p is detection probability).
n.samples <- 1
p <- 0.7            # probability of detection
x <- rbinom(n = n.samples, size = 1, prob = p)
if (x > 0) {
print("Detected")
} else {
print("Not detected")
}
########
# Draw a sample from a Binomial distribution with p = 0.7 (here, p is detection probability).
n.samples <- 1
p <- 0.7            # probability of detection
x <- rbinom(n = n.samples, size = 1, prob = p)
if (x > 0) {
print("Detected")
} else {
print("Not detected")
}
########
# Draw a sample from a Binomial distribution with p = 0.7 (here, p is detection probability).
n.samples <- 1
p <- 0.7            # probability of detection
x <- rbinom(n = n.samples, size = 1, prob = p)
if (x > 0) {
print("Detected")
} else {
print("Not detected")
}
x
p
x <- rbinom(n = n.samples, size = 1, prob = p)
if (x > 0) {
print("Detected")
} else {
print("Not detected")
}
x <- rbinom(n = n.samples, size = 1, prob = p)
if (x > 0) {
print("Detected")
} else {
print("Not detected")
}
####
####  ifelse()
####
## Note if...else only works for running one logical (T/F) test at a time. If we have a spreadsheet with lots of data, we need something else.
n.samples <- 100
set.seed(2017)     # the 'seed' allows random number generators to give the same result every time!
## 100 samples from a binomial disribution with detection probability = p = 0.7.
y <- rbinom(n = n.samples, size = 1, prob = p)
y
## incorrect usage
if (y == 1) {
print("Detected")
} else {
print("Not detected")
}   # PRINTS A WARNING MESSAGE!
## Use ifelse instead.
detection.history <- ifelse(y == 1, print("Detected"), print("Not detected"))
detection.history
## Going the other direction.
ifelse(detection.history == "Detected", 1, 0)
xt  <-  cbind(rbinom(10, 1, .5), rbinom(10, 1, .6))
xt
ifelse(xt[, 1] > 0 & xt[, 2] > 0, print("Detected twice"),
print("Not detected twice"))
for(i in 1:10){
print(i)
}
for(j in c(1,2,3,4,5,6,7,8,9,10)){
print(j)
}
count <- 0
for(i in 1:n.iter){
count <- count+i            # assign a new value of count equal to the old value of count + i
print(count)
}
####
####  for loops
####
for(i in 1:10){
print(i)
}
for(j in c(1,2,3,4,5,6,7,8,9,10)){       # alternative
print(j)
}
n.iter <- 10                   # another alternative!
count <- 0
for(i in 1:n.iter){
count <- count+1            # assign a new value of count equal to the old value of count plus 1
print(count)
}
## Using the iteration variable "i" within the for loop:
count <- 0
for(i in 1:n.iter){
count <- count+i            # assign a new value of count equal to the old value of count + i
print(count)
}
## A for-loop for dependent sequence (here, the Fibonacci sequence)
n.iter <- 10
x <- rep(0, n.iter)            # set up vector of all zeros
x[1] <- 1                     # assign x_1  <-  1
x[2] <- 1                     # assign x_2 = 0
for(i in 3:n.iter){
x[i] <- x[i-1]+x[i-2]       # x_i = x_(i-1) + x_(i-2)
}
x
###
### apply (A more efficient way to iterate)
###
W <- matrix(rpois(4, 10), nrow = 2, ncol = 2)  # Create a 2X2 matrix using a Poisson distribution with lambda = 10.
W
## Calculate the row means.
apply(W, 1, mean)
## Calculate the column means.
apply(W, 2, mean)
## Identify the column that has the largest value.
apply(W, 1, which.max)
## Apply your own functions to each row in a matrix.
MyFunc <- function(x){
2+sum(x/5)-3/2*mean(x)^2
}
apply(W, 1, MyFunc)
##########
# lapply: apply a function across a list or vector
lapply(1:5,function(x) exp(x))
lapply(1:5, function(x) sqrt(trees$Volume[x]))
##########
# sapply: apply a function across a list or vector, and simplify the returned object
sapply(1:5,function(x) exp(x))
#########
# tapply: apply a function across a vector that is organized into groups
df.new <- data.frame(
var1 = runif(10),
group = sample(c("A","B"),10,replace=T)
)
tapply(df.new$var1,df.new$group,sum)
###
### apply (A more efficient way to iterate)
###
W <- matrix(rpois(4, 10), nrow = 2, ncol = 2)  # Create a 2X2 matrix using a Poisson distribution with lambda = 10.
W
## Calculate the row means.
apply(W, 1, mean)
## Calculate the column means.
apply(W, 2, mean)
## Identify the column that has the largest value.
apply(W, 1, which.max)
## Apply your own functions to each row in a matrix.
MyFunc <- function(x){
2+sum(x/5)-3/2*mean(x)^2
}
apply(W, 1, MyFunc)
##########
# lapply: apply a function across a list or vector
lapply(1:5,function(x) exp(x))
lapply(1:5, function(x) sqrt(trees$Volume[x]))
##########
# sapply: apply a function across a list or vector, and simplify the returned object (usually returns a vector)
sapply(1:5,function(x) exp(x))
#########
# tapply: summarize a vector by group (apply a summary function separately to each group)
df.new <- data.frame(
var1 = runif(10),
group = sample(c("A","B"),10,replace=T)
)
tapply(df.new$var1,df.new$group,sum)
knitr::opts_chunk$set(echo = TRUE)
rmd2rscript2("module1_4.Rmd")
rmd2rscript <- function(infile="module1_1.Rmd"){    # function for converting markdown to scripts
outfile1 <- gsub(".Rmd",".R",infile)
outfile2 <- gsub(".Rmd",".txt",infile)
close( file( outfile1, open="w" ) )   # clear output file
close( file( outfile2, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile1,"w")
con3 <- file(outfile2,"w")
stringToFind <- "```{r*"
isrblock <- FALSE
count=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
if(isrblock){
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if(count>1){
write(newline,file=con2,append=TRUE)
write(newline,file=con3,append=TRUE)
}
count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2 <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2("module1_4.Rmd")
unlink('module2_1_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
##################################################
####                                          ####
####  R Bootcamp #2, Module 1                 ####
####                                          ####
####   University of Nevada, Reno             ####
####                                          ####
##################################################
###################################################
####  Expanding R functionality: packages etc. ####
###################################################
library(modeest)    # load the package: This is package 'modeest' written by P. PONCET.
install.packages("modeest")
library(modeest)    # load the package: This is package 'modeest' written by P. PONCET.
library(modeest)    # load the package: This is package 'modeest' written by P. PONCET.
install.packages("modeest")
BiocManager::install("genefilter")
library(modeest)    # load the package: This is package 'modeest' written by P. PONCET.
library(modeest)    # load the package: This is package 'modeest' written by P. PONCET.
library(help = "modeest")    # get overview of package
library(help = "modeest")    # get overview of package
newdf <- read.table(file="data_missing.txt", sep="\t", header=T)
?mlv   # learn more about the function for computing the mode. Who knew there were so many methods for computing the mode?
# lets find the most frequent value(s) in the "Export" column:
mlv(newdf$Export, method="mfv", na.rm = T)
mlv(newdf$Import, method="mfv", na.rm = T)
mlv(newdf$Import, method="mfv", na.rm = T)
detach("modeest")  # remove the package from the workspace
detach("modeest")
library(modeest)
detach(modeest)
detach("package:modeest")  # remove the package from the workspace
#########
# 3D Plotting example
#########
#########
# Data: dog barks per day (and two explanatory variables)
Cars= c(32, 28, 9, 41, 23, 26, 26, 31, 12, 25, 32, 13, 19, 19, 38,
36, 43, 26, 21, 15, 17, 12, 7, 41, 38, 33, 31, 9, 40, 21)
Food= c(0.328, 0.213, 0.344, 0.339, 0.440, 0.335, 0.167, 0.440, 0.328,
0.100, 0.381, 0.175, 0.238, 0.360, 0.146, 0.430, 0.446, 0.345,
0.199, 0.301, 0.417, 0.409, 0.142, 0.301, 0.305, 0.230, 0.118,
0.272, 0.098, 0.415)
Bark=c(15, 14, 6, 12, 8, 1, 9, 8, 1, 12, 14, 9, 8, 1, 19, 8, 13, 9,
15, 11, 8, 7, 8, 16, 15, 10, 15, 4, 17, 0)
library(car)
car::scatter3d(Bark~Food+Cars,surface=TRUE)
install.packages("car")
install.packages("car")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(car)
car::scatter3d(Bark~Food+Cars,surface=TRUE)
install.packages("rgl")
library(car)
car::scatter3d(Bark~Food+Cars,surface=TRUE)
install.packages("car")
install.packages("rgl")   # you need this one as well!
library(car)
unlink('module2_1_cache', recursive = TRUE)
browseVignettes('car')
demo(package="stats")
help.start()
knitr::opts_chunk$set(echo = TRUE)
rmd2rscript2("module2_1.Rmd")
unlink('module2_2_cache', recursive = TRUE)
rmd2rscript2("module2_2.Rmd")
unlink('module2_3_cache', recursive = TRUE)
unlink('module2_4_cache', recursive = TRUE)
unlink('module2_5_cache', recursive = TRUE)
rmd2rscript2("module2_2.Rmd")
rmd2rscript2("module2_3.Rmd")
rmd2rscript2("module2_4.Rmd")
rmd2rscript2("module2_4.Rmd")
rmd2rscript2("module2_5.Rmd")
