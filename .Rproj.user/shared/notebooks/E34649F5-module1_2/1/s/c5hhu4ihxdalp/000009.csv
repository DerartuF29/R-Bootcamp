"0","####"
"0","####  Subsetting data"
"0","####"
"0","##########"
"0","# The ""which()"" function -- return indices of a vector that meet a certain condition (condition is TRUE)"
"0","which(data.df[,2]==74)       # elements of the data column that are equal to 74"
"1","[1]"
"1","  2"
"1"," 17"
"1","
"
"0","which(data.df[,2]!=74)       # elements of the data column that are NOT equal to 74"
"1"," [1]"
"1","  1"
"1","  3"
"1","  4"
"1","  5"
"1","  6"
"1","  7"
"1","  8"
"1","  9"
"1"," 10"
"1"," 11"
"1"," 12"
"1"," 13"
"1"," 14"
"1"," 15"
"1"," 16"
"1"," 18"
"1"," 19"
"1"," 20"
"1","
"
"0","which(data.df[,2]<74)        #  and so on..."
"1","[1]"
"1","  1"
"1","  7"
"1","  8"
"1","  9"
"1"," 10"
"1"," 11"
"1"," 12"
"1"," 15"
"1"," 18"
"1","
"
"0","which((data.df[,2]<74)|(data.df[,2]==91))   # use the OR operator"
"1"," [1]"
"1","  1"
"1","  7"
"1","  8"
"1","  9"
"1"," 10"
"1"," 11"
"1"," 12"
"1"," 15"
"1"," 18"
"1"," 20"
"1","
"
"0","data.df[which(data.df[,2]<74),2]    # check to make sure these numbers are under 74- they had better be!"
"1","[1]"
"1"," 46"
"1"," 68"
"1"," 70"
"1"," 60"
"1"," 55"
"1"," 35"
"1"," 51"
"1"," 68"
"1"," 73"
"1","
"
"0","data.df[data.df[,2]<74,2]    # alternative syntax without using ""which()""... "
"1","[1]"
"1"," 46"
"1"," 68"
"1"," 70"
"1"," 60"
"1"," 55"
"1"," 35"
"1"," 51"
"1"," 68"
"1"," 73"
"1","
"
"0","sub.countries<-c(""Chile"",""Colombia"",""Mexico"")    # create vector of character strings"
"0","which(data.df[,1]==""Chile"") "
"1","[1]"
"1"," 3"
"1","
"
"0","which(data.df$Country==""Chile"") "
"1","[1]"
"1"," 3"
"1","
"
"0","# This command doesn't work because sub.countries is a vector, not a single character string. "
"0","which (data.df[,1]==sub.countries) "
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"1","integer(0)
"
