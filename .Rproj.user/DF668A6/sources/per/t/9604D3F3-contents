---
title: "Data Wrangling in R Part 2 - Working with Grouped Data"
author: "Christine Albano"
date: "`r format(Sys.time(), '%B %d, %Y')`"
output: 
  bookdown::html_document2:
    code_folding: hide
    df_print: paged
    fig_caption: yes
    toc: true
    toc_float: true
editor_options: 
  chunk_output_type: console
---

In this tutorial we learn some additional techniques for data wrangling  using the 'Tidyverse' set of packages. Specifically, we focus on working with grouped data using the dplyr package and with wrangling dates with the lubridate package. Much of the content in this tutorial is based on the online resource [R for Data Science] (http://r4ds.had.co.nz/), by Garrett Grolemund and Hadley Wickham. 

![](http://r4ds.had.co.nz/diagrams/data-science-wrangle.png)

# Learning goals
In this short tutorial, you will learn how to:

  * Work with and parse dates using *lubridate*
  
  * Conduct various types of data transformations for grouped data by combining the *group_by* command with other *dplyr* commands we learned in the last tutorial:
  
      * filtering rows with *filter()*
      
      * creating new variables with *mutate()*
      
      * summarizing with *summarize()*

We will continue to use example climate data collected at local stations to understand these concepts.

```{r include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

```{r setup}
dir <- setwd("C:/Users/Tracy/Desktop/skcr_day_2")
# install.packages("devtools")
# devtools::install_cran("tidyverse", repos = "https://cran.rstudio.com/")
library(tidyverse)
library(lubridate)
getwd()
# dir <- setwd("C:/Users/calbano/Documents/RShortCourse")
```

# Importing data into *R*

Here, we import an expanded set of meteorological data from Hungry Horse and Polson Kerr Dams as a *tibble* dataframe.

```{r dataimport}
#  import data as a Tibble dataframe.
clim_data <- read_csv("data/climate_station_data_2016_2017.csv")
View(clim_data)
head(clim_data)
tail(clim_data)
```

#  Working with Dates - Date from character string
When working with environmental data, we often have observations that occur over time. We want to eventually get to the point that we can summarize our data by years, seasons, months, or even day of the year. The *lubridate* package in R is very useful for creating and parsing dates this purpose. Date/time data often comes as strings in a variety of orders/formats. Lubridate is useful because it automatically works out the date format once you specify the order of the components. To to do this, identify the order in which year, month, and day appear in your dates, then arrange "y", "m", and "d" in the same order. That gives you the name of the lubridate function that will parse your date. For example:

```{r lubridate1}

# note the different formats of the date_string and date_dtformat objects in the environment window

date_string <- ("2017-01-31")
date_dtformat <- ymd(date_string)
```
a variety of other formats/orders can also be accommodated. Note how each of these are reformatted to "2017-01-31" A timezone can be specified using tz=
```
```{r lubridate2}
mdy("January 31st, 2017")
dmy("31-Jan-2017")
ymd(20170131)
ymd(20170131, tz = "UTC")

```

times can be included as well. Note that unless otherwise specified, R assumes UTC time

```{r datetime}
ymd_hms("2017-01-31 20:11:59")
mdy_hm("01/31/2017 08:01")

```

we can also have R tell us the current time or date

```{r now}
now()
now(tz = "UTC")
today()
```

#  Working with Dates - Parsing Dates
Once dates are in date format, we can easily pull out their individual components like this:

```{r lubridate components}
datetime <- ymd_hms("2016-07-08 12:34:56")

# year
year(datetime)
# month
month(datetime)
month(datetime, label = TRUE)
# day of month
mday(datetime)
# day of year (julian day)
yday(datetime)
# day of week
wday(datetime)
wday(datetime, label = TRUE, abbr = FALSE)
```

##  Working with Dates - Parsing Dates Example
We can use lubridate and dplyr to make new columns from a date for year, month, day of month, and day of year

first we convert the character string date into date format. Here we are naming the new column "Date", so R will replace character string with date formatted dates

```{r lubridate3}
clim_data <- clim_data %>% mutate(Date = mdy(Date))
clim_data
```

now we can use mutate to create individual columns for the date components

```{r mutate date}
clim_data <- clim_data %>% mutate(
  Year = year(Date),
  Month = month(Date),
  Day = mday(Date),
  Yday = yday(Date)
)
clim_data
```

#  Working with grouped data - the group_by function in dplyr

Now that we have our date information worked out, we can really start to dig into the climate data in useful ways using the *group_by* function in dplyr

Here we get annual sums of precipitation for each year and station. Note that we coerce the numeric Year column to a factor since we want to treat it as a grouping variable

```{r groupby1}
annual_sum_precip_by_station <- clim_data %>%
  group_by(Station, as.factor(Year)) %>%
  summarise(PrecipSum = sum(PrecipIn))
```

we can also use group_by in conjunction with filter to subset data -- here we subset the dates when precipitation is occurring

```{r wet days}
wet_days <- clim_data %>%
  group_by(Station) %>%
  filter(PrecipIn > 0)
```

#  Exercise
* Open a new R script 

* Import the climate_station_data2016_2017.csv dataset

* Summarize the clim_data dataset in the following ways:

  * get monthly mean TMin and TMax for each station for each year
  
  * now get the monthly mean TMin and TMax for each year, across stations
  
  * get the monthly mean TMin and TMax across stations and years
